import { HttpService } from '@nestjs/axios';
import { HttpMessageDto } from '../../utils/dto/http-status-message.dto';
import { TrakcareService } from '../../trakcare/trakcare.service';
import { UtilsService } from '../../utils/utils.service';
import { CheckEligibleService } from '../../aia/check-eligible/check-eligible.service';
import { QueryDiagnosisDto, ResultSubmitDiagnosisDto } from './dto/query-diagnoisis-preauth-submission.dto';
import { QueryPreAuthNoteDto, ResultSubmitPreAuthNoteDto } from './dto/query-preauthnote-preauth-submission.dto';
import { QueryPreBillingDto, ResultSubmitPreBillingDto, DeletePreBillingDto } from './dto/query-prebilling-preauth-submission.dto';
import { QuerySubmitPreAuthDto } from './dto/query-submit-preauth-submission.dto';
import { QueryPreauthSubmissionDto } from './dto/query-preauth-submission.dto';
import { ResultClaimFormListDto } from './dto/result-listclaim-preauth-submission.dto';
import { ResultSubmitIPDVisitDto } from './dto/query-visit-preauth-submissiondto';
import { QueryUpdateReferenceVNBodyDto, ResultSubmitUpdateReferenceVNDto } from './dto/query-updatereferencevn-preauth-submission.dto';
import { ResultSubmitPreAuthSubmissionDto } from './dto/result-submit-preauth-submission.dto';
import { ResultPreAuthVisitDto } from './dto/result-visit-preauth-submission.dto';
import { QueryAccidentDto, ResultSubmitAccidentDto } from './dto/query-accident-preauth-submission.dto';
import { QueryProcedureDto, ResultSubmitProcedureDto } from './dto/query-procedure-preauth-submission.dto';
import { QueryPackageBundleDto } from './dto/query-packagebundle-preauth-submission.dto';
import { ResultPackageBundleDto } from './dto/result-packagebundle-preauth-submission.dto';
import { ResultlistBillingDto } from './dto/result-ListBilling.dto';
import { ResultAuthNoteDto } from './dto/result-authnote-preauth-submissiondto';
import { ResultPreAuthDoctorDto } from './dto/result-doctor-preauth-submission.dto';
import { ResultPreAuthDiagnosisDto } from './dto/result-diagnosis-preauth-submission.dto';
import { ResultPreAuthProcedurDto } from './dto/result-procedure-preauth-submission.dto';
import { ResultPreAuthAccidentDto } from './dto/result-accident-preauth-submission.dto';
import { ResultPreAuthBillingDto } from './dto/result-billing-preauth-submission.dto';
import { ResultCheckeligiblePreAdmissionDto } from './dto/result-check-eligible-preadmission.dto';
import { ResultlistICDDxInfoDto } from './dto/result-ICDDx.dto';
import { ResultlistICD9InfoDto } from './dto/result-ICD9.dto';
import { ResultBillingSubInfoDto } from './dto/result-BillingSub.dto';
import { QueryUpdateIsAdmissionBodyDto, ResultSubmitUpdateIsAdmissionDto } from './dto/query-updateisadmission-preauth-submission.dto';
import { ResultReviewOpdDischargeDto } from './dto/review-preauth-submission.dto';
export declare class PreauthSubmissionService {
    private readonly httpService;
    private readonly trakcareService;
    private readonly utilsService;
    private readonly checkEligibleService;
    constructor(httpService: HttpService, trakcareService: TrakcareService, utilsService: UtilsService, checkEligibleService: CheckEligibleService);
    getListBilling(xHN: string): Promise<ResultlistBillingDto>;
    getListVisitClaimAIA(queryPreauthSubmissionDto: QueryPreauthSubmissionDto): Promise<ResultClaimFormListDto>;
    UpdateReferenceVN(queryUpdateReferenceVNBodyDto: QueryUpdateReferenceVNBodyDto): Promise<ResultSubmitUpdateReferenceVNDto>;
    UpdateIsAdmission(queryUpdateIsAdmissionBodyDto: QueryUpdateIsAdmissionBodyDto): Promise<ResultSubmitUpdateIsAdmissionDto>;
    getPreAuthVisit(queryPreauthSubmissionDto: QueryPreauthSubmissionDto): Promise<ResultPreAuthVisitDto>;
    getPreAuthDoctor(queryPreauthSubmissionDto: QueryPreauthSubmissionDto): Promise<ResultPreAuthDoctorDto>;
    getPreAuthDiagnosis(queryPreauthSubmissionDto: QueryPreauthSubmissionDto): Promise<ResultPreAuthDiagnosisDto>;
    getPreAuthProcedure(queryPreauthSubmissionDto: QueryPreauthSubmissionDto): Promise<ResultPreAuthProcedurDto>;
    getPreAuthAccident(queryPreauthSubmissionDto: QueryPreauthSubmissionDto): Promise<ResultPreAuthAccidentDto>;
    setPreBilling(queryPreBillingDto: QueryPreBillingDto): Promise<ResultSubmitPreBillingDto>;
    getPreBilling(queryPreauthSubmissionDto: QueryPreauthSubmissionDto): Promise<ResultPreAuthBillingDto>;
    getPackageBundle(queryPackageBundleDto: QueryPackageBundleDto): Promise<ResultPackageBundleDto>;
    SubmitPreBilling(queryPreBillingDto: QueryPreBillingDto): Promise<ResultSubmitPreBillingDto>;
    InsertPreBilling(queryPreBillingDto: QueryPreBillingDto): Promise<ResultSubmitPreBillingDto>;
    deletePreBillingByRefId(deletePreBillingDto: DeletePreBillingDto): Promise<ResultSubmitPreBillingDto>;
    previewPreBilling(queryPreBillingDto: QueryPreBillingDto): Promise<ResultSubmitPreBillingDto>;
    deletePreBillingById(deletePreBillingDto: DeletePreBillingDto): Promise<ResultSubmitPreBillingDto>;
    getPreAuthNote(querySubmitPreAuthDto: QuerySubmitPreAuthDto): Promise<ResultAuthNoteDto>;
    SubmitPreAuthVisit(querySubmitPreAuthDto: QuerySubmitPreAuthDto): Promise<ResultSubmitIPDVisitDto>;
    ReloadDiagnosis(queryDiagnosisDto: QueryDiagnosisDto): Promise<ResultSubmitDiagnosisDto>;
    SubmitDiagnosis(queryDiagnosisDto: QueryDiagnosisDto): Promise<ResultSubmitDiagnosisDto>;
    SubmitPreAuthNote(queryPreAuthNoteDto: QueryPreAuthNoteDto): Promise<ResultSubmitPreAuthNoteDto>;
    SubmitAccident(queryAccidentDto: QueryAccidentDto): Promise<ResultSubmitAccidentDto>;
    SubmitProcedure(queryProcedureDto: QueryProcedureDto): Promise<ResultSubmitProcedureDto>;
    SubmitPreSubmissionToAIA(querySubmitPreAuthDto: QuerySubmitPreAuthDto): Promise<ResultSubmitPreAuthSubmissionDto>;
    SubmitPreSubmissionToAIA_OLD(querySubmitPreAuthDto: QuerySubmitPreAuthDto): Promise<ResultSubmitPreAuthSubmissionDto>;
    checkeligiblePreAdmission(queryPreauthSubmissionDto: QueryPreauthSubmissionDto): Promise<ResultCheckeligiblePreAdmissionDto>;
    ReviewPreAuth(queryPreauthSubmissionDto: QueryPreauthSubmissionDto): Promise<ResultReviewOpdDischargeDto>;
    getICDDx(xICDDxCode: string): Promise<ResultlistICDDxInfoDto>;
    getICD9(xICD9Code: string): Promise<ResultlistICD9InfoDto>;
    getBillingSubgroup(xBillingCode: string): Promise<ResultBillingSubInfoDto>;
    convertDxTypeCode(inputInsurerCode: string, inputdxTypeCodeTrakcare: string): Promise<import("../../utils/dto/utils.dto").DiagnosisTypeMappingDto>;
    calculateDaysBetweenDates(startDate: string, endDate: string): number;
    ReplaceSpacialCharacter(inputString: string): string;
    addFormatHTTPStatus(data: HttpMessageDto, inputstatusCode: number, inputmessage: string, inputerror: string): void;
}
