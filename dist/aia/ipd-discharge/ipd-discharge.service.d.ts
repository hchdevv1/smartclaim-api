import { HttpService } from '@nestjs/axios';
import { HttpMessageDto } from '../../utils/dto/http-status-message.dto';
import { TrakcareService } from '../../trakcare/trakcare.service';
import { UtilsService } from '../../utils/utils.service';
import { QueryIpdDischargeDto } from './dto/query-ipd-discharge.dto';
import { ResultIpdDischargeVisitDto } from './dto/result-visit-ipd-discharge.dto';
import { ResultIPDVitalSignDto } from './dto/result-vitalsign-ipd-discharge.dto';
import { ResultIpdDischargeDoctorDto } from './dto/result-doctor-ipd-discharge.dto';
import { ResultIpdDischargeDiagnosisDto } from './dto/result-diagnosis-ipd-discharge.dto';
import { ResultIpdDischargeInvestigationDto } from './dto/result-investigation-ipd-discharge.dto';
import { ResultIpdDischargeOrderItemDto } from './dto/result-orderitem-ipd-discharge.dto';
import { ResultIpdDischargeBillingDto } from './dto/result-billing-ipd-discharge.dto';
import { ResultIpdDischargeProcedurDto } from './dto/result-procedure-ipd-discharge.dto';
import { ResultIpdDischargeAccidentDto } from './dto/result-accident-ipd-discharge.dto';
import { ResultConcurNoteDto } from './dto/result-concurnote-ipd-discharge.dto';
import { ResultSubmitIPDVisitDto, QueryIPDVisitDto } from './dto/query-visit-ipd-discharge.dto';
import { ResultSubmitProcedureDto, QueryProcedureDto } from './dto/query-procedure-ipd-discharge.dto';
import { ResultSubmitAccidentDto, QueryAccidentDto } from './dto/query-accident-ipd-discharge.dto';
import { ResultSubmitConcurNoteDto, QueryConcurNoteDto } from './dto/query-concurrentnote-ipd-discharge.dto';
import { QuerySubmitIpdDischargeDto } from './dto/query-submit-ipd-discharge.dto';
import { ResultSubmitIpdDischargeDto } from './dto/result-submit-ipd-discharge.dto';
import { ResultReviewOpdDischargeDto } from './dto/review-ipd-discharge.dto';
export declare class IpdDischargeService {
    private readonly httpService;
    private readonly trakcareService;
    private readonly utilsService;
    constructor(httpService: HttpService, trakcareService: TrakcareService, utilsService: UtilsService);
    getIPDVisit(queryIpdDischargeDto: QueryIpdDischargeDto): Promise<ResultIpdDischargeVisitDto>;
    getIPDVitalSign(queryIpdDischargeDto: QueryIpdDischargeDto): Promise<ResultIPDVitalSignDto>;
    getIPDDischargeDoctor(queryIpdDischargeDto: QueryIpdDischargeDto): Promise<ResultIpdDischargeDoctorDto>;
    getIPDDischargeDiagnosis(queryIpdDischargeDto: QueryIpdDischargeDto): Promise<ResultIpdDischargeDiagnosisDto>;
    getIPDDischargeInvestigation(queryIpdDischargeDto: QueryIpdDischargeDto): Promise<ResultIpdDischargeInvestigationDto>;
    getIPDDischargeOrderItem(queryIpdDischargeDto: QueryIpdDischargeDto): Promise<ResultIpdDischargeOrderItemDto>;
    getIPDDischargeBilling(queryIpdDischargeDto: QueryIpdDischargeDto): Promise<ResultIpdDischargeBillingDto>;
    getIPDDischargeProcedure(queryIpdDischargeDto: QueryIpdDischargeDto): Promise<ResultIpdDischargeProcedurDto>;
    getIPDDischargeAccident(queryIpdDischargeDto: QueryIpdDischargeDto): Promise<ResultIpdDischargeAccidentDto>;
    getIPDDischargeConcurNote(queryIpdDischargeDto: QueryIpdDischargeDto): Promise<ResultConcurNoteDto>;
    SubmitIPDVisit(queryIPDVisitDto: QueryIPDVisitDto): Promise<ResultSubmitIPDVisitDto>;
    SubmitProcedure(queryProcedureDto: QueryProcedureDto): Promise<ResultSubmitProcedureDto>;
    SubmitAccident(queryAccidentDto: QueryAccidentDto): Promise<ResultSubmitAccidentDto>;
    SubmitConcurNote(queryConcurNoteDto: QueryConcurNoteDto): Promise<ResultSubmitConcurNoteDto>;
    SubmitIPDDischargeToAIA(querySubmitIpdDischargeDto: QuerySubmitIpdDischargeDto): Promise<ResultSubmitIpdDischargeDto>;
    ReviewIPDDischarge(queryIpdDischargeDto: QueryIpdDischargeDto): Promise<ResultReviewOpdDischargeDto>;
    convertDxTypeCode(inputInsurerCode: string, inputdxTypeCodeTrakcare: string): Promise<import("../../utils/dto/utils.dto").DiagnosisTypeMappingDto>;
    addFormatHTTPStatus(data: HttpMessageDto, inputstatusCode: number, inputmessage: string, inputerror: string): void;
    calculateDaysBetweenDates(startDate: string, endDate: string): number;
}
