import { HttpService } from '@nestjs/axios';
import { Prisma } from '../../prisma/generate-client-db';
import { HttpMessageDto } from '../utils/dto/http-status-message.dto';
import { aia_accessTokenDTO, IllnessTypeDto, IllnessSurgeryDto, PolicyTypeDto, ServiceSettingDto, ClaimStatusDto, IdTypeDto, DocumentTypeDto, CauseofInjurywoundtypeDto, CauseofinjurysideDto, AccidentplaceDto, Accidentcauseover45daysDto, DiagnosisTypeMappingDto, AnesthesiaListDto, OpeartionisPackageDto, IndicationsForAdmissionDto, ServiceSettingIllnessDto, ListPackageBundleDto, PackageBundleDto } from './dto/utils.dto';
import { QueryCreateClaimDocumentDtoBodyDto, ResultAttachDocListInfoDto, QuerylistDocumentNameDtoBodyDto, QueryDeleteDocumentByDocNameDto, ResultDeleteDocumentByDocNameDto, QueryListDocumentforAttachDocListDto, ResultUpdateDocumentByDocNameDto } from './dto/claim-documents.dto';
import { QueryProcedeureDatabaseBodyDto, ResultOpdDischargeProcedurDto } from './dto/result-procedure-databse.dto';
import { QueryDiagnosisDatabaseBodyDto, ResultPreDiagnosisDto } from './dto/result-diagnosis-databse.dto';
import { QueryVisitDatabaseBodyDto, ResultOpdDischargeVisitDto } from './dto/result-visit-databse.dto';
import { QueryAccidentDatabaseBodyDto, ResultAccidentDatabaseDto } from './dto/result-accident-databse.dto';
import { QueryPreBillingDatabaseBodyDto, ResultPreBillingDto } from './dto/result-prebilling-databse.dto';
import { QueryConcurNoteDatabaseBodyDto, ResultConcurNoteDto } from './dto/result-concurnote-databse.dto';
import { QueryPreAuthNoteDatabaseBodyDto, ResultPreAuthNoteDto } from './dto/result-preauthnote-databse.dto';
export declare class UtilsService {
    private readonly httpService;
    constructor(httpService: HttpService);
    EncryptAESECB(text: string, APISecretkey: string): any;
    DecryptAESECB(text: string, APISecretkey: string): any;
    requestAccessToken_AIA(): Promise<aia_accessTokenDTO>;
    IllnessType(xInsurercode: string): Promise<IllnessTypeDto>;
    IllnessSurgery(xInsurercode: string): Promise<IllnessSurgeryDto>;
    policyType(xInsurercode: string): Promise<PolicyTypeDto>;
    getServiceSetting(xInsurercode: string): Promise<ServiceSettingDto>;
    getServiceSettingIllnesstype(xInsurercode: string): Promise<ServiceSettingIllnessDto>;
    getClaimStatus(xInsurercode: string): Promise<ClaimStatusDto>;
    getIdType(xInsurercode: string): Promise<IdTypeDto>;
    getClaimStatusCodeByDescription(xInsurercode: string, xDesc: string): Promise<ClaimStatusDto>;
    getDocumentType(xInsurercode: string): Promise<DocumentTypeDto>;
    getdocumentTypeforAttachDocList(xInsurercode: string): Promise<DocumentTypeDto>;
    getAnesthesiaList(xInsurercode: string): Promise<AnesthesiaListDto>;
    getOpeartionisPackage(xInsurercode: string): Promise<OpeartionisPackageDto>;
    getIndicationsForAdmission(xInsurercode: string): Promise<IndicationsForAdmissionDto>;
    getListPackageBundle(): Promise<ListPackageBundleDto>;
    getPackageBundle(xPackageCode: string): Promise<PackageBundleDto>;
    getvisitformDatabase(queryVisitDatabaseBodyDto: QueryVisitDatabaseBodyDto): Promise<ResultOpdDischargeVisitDto>;
    getvisitIPDformDatabase(queryVisitDatabaseBodyDto: QueryVisitDatabaseBodyDto): Promise<ResultOpdDischargeVisitDto>;
    getPrevisitformDatabase(queryVisitDatabaseBodyDto: QueryVisitDatabaseBodyDto): Promise<ResultOpdDischargeVisitDto>;
    getProcedureformDatabase(queryProcedeureDatabaseBodyDto: QueryProcedeureDatabaseBodyDto): Promise<ResultOpdDischargeProcedurDto>;
    getDiagnosisformDatabase(queryDiagnosisDatabaseBodyDto: QueryDiagnosisDatabaseBodyDto): Promise<ResultPreDiagnosisDto>;
    getAccidentformDatabase(queryAccidentDatabaseBodyDto: QueryAccidentDatabaseBodyDto): Promise<ResultAccidentDatabaseDto>;
    getCauseofInjurywoundtype(xInsurercode: string): Promise<CauseofInjurywoundtypeDto>;
    getCauseofInjurySide(xInsurercode: string): Promise<CauseofinjurysideDto>;
    getAccidentPlace(xInsurercode: string): Promise<AccidentplaceDto>;
    getAccidentCauseOver45Day(xInsurercode: string): Promise<Accidentcauseover45daysDto>;
    getPreBillingformDatabase(queryPreBillingDatabaseBodyDto: QueryPreBillingDatabaseBodyDto): Promise<ResultPreBillingDto>;
    getConcurNoteformDatabase(queryConcurNoteDatabaseBodyDto: QueryConcurNoteDatabaseBodyDto): Promise<ResultConcurNoteDto>;
    getPreAuthNoteformDatabase(queryPreAuthNoteDatabaseBodyDto: QueryPreAuthNoteDatabaseBodyDto): Promise<ResultPreAuthNoteDto>;
    getDiagnosisTypeMapping(xInsurercode: string, xDxtypecodeTrakcare: string): Promise<DiagnosisTypeMappingDto>;
    getFileAsBase64(id: number): Promise<{
        filename: string;
        base64: string;
    }>;
    saveFile(file: Express.Multer.File, body: QueryCreateClaimDocumentDtoBodyDto): Promise<{
        insurerid: number | null;
        documenttypecode: string | null;
        documenttypename: string | null;
        id: number;
        refid: string | null;
        transactionno: string | null;
        hn: string | null;
        vn: string | null;
        runningdocument: Prisma.Decimal | null;
        documentname: string | null;
        serverpath: string | null;
        filepath: string;
        filesize: bigint | null;
        filemimetype: string | null;
        uploaddate: Date | null;
        uploadedby: string | null;
        originalname: string | null;
        isclaimexcluded: boolean | null;
        originaldocumenttypecode: string | null;
    }>;
    getFilesAsBase64findMany(ids: string): Promise<{
        filename: string;
        base64: string;
    }[]>;
    getlistDocumentName(querylistDocumentNameDtoBodyDto: QuerylistDocumentNameDtoBodyDto): Promise<any>;
    getDocumentByDocname(queryCreateClaimDocumentDtoBodyDto: QueryCreateClaimDocumentDtoBodyDto): Promise<{
        filename: string;
        base64: string;
    }>;
    getListDocumentByRefId(queryCreateClaimDocumentDtoBodyDto: QueryCreateClaimDocumentDtoBodyDto): Promise<ResultAttachDocListInfoDto[]>;
    UpdateDocumentTypeCode(querylistDocumentNameDtoBodyDto: QuerylistDocumentNameDtoBodyDto): Promise<ResultUpdateDocumentByDocNameDto>;
    DeleteDocumentByDocName(queryDeleteDocumentByDocNameDto: QueryDeleteDocumentByDocNameDto): Promise<ResultDeleteDocumentByDocNameDto>;
    isClaimExcludedByDocName(queryDeleteDocumentByDocNameDto: QueryDeleteDocumentByDocNameDto): Promise<ResultDeleteDocumentByDocNameDto>;
    getlistDocumentClaim(querylistDocumentNameDtoBodyDto: QuerylistDocumentNameDtoBodyDto): Promise<{
        filename: string;
        originalname: string;
        documenttypecode: string;
        isClaimExcludedByDocName: boolean;
    }[]>;
    getListDocumentforAttachDocList(queryListDocumentforAttachDocListDto: QueryListDocumentforAttachDocListDto): Promise<ResultAttachDocListInfoDto[]>;
    getListDocumentByTransactionNo(queryCreateClaimDocumentDtoBodyDto: QueryCreateClaimDocumentDtoBodyDto): Promise<ResultAttachDocListInfoDto[]>;
    getListDocumentDummy(xDocumentName: string): Promise<ResultAttachDocListInfoDto[]>;
    getListDocumentBillingByTransactionNo(queryCreateClaimDocumentDtoBodyDto: QueryCreateClaimDocumentDtoBodyDto): Promise<ResultAttachDocListInfoDto[]>;
    saveBase64File(base64: string, fileName: string): Promise<string>;
    addFormatHTTPStatus(data: HttpMessageDto, inputstatusCode: number, inputmessage: string, inputerror: string): void;
}
